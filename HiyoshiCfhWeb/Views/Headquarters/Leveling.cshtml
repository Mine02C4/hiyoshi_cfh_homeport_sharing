@model HiyoshiCfhWeb.Models.Admiral
@{
    var admiral = Model;
    ViewBag.Title = "レベリング";
}
@Html.Partial("_HeaderPartial", admiral)

<div class="row leveling-wrap">
    <div class="table-responsive col-md-8">
        <table class="table leveling">
            <thead>
                <tr>
                    <th>
                        ID
                    </th>
                    <th>
                        艦種
                    </th>
                    <th>
                        艦名
                    </th>
                    <th>
                        レベル
                    </th>
                    <th>
                        改造状況
                    </th>
                    <th>
                        累積経験値
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in admiral.Ships.OrderByDescending(x => x.Level))
                {
                    <tr class="@(item.ShipInfo.NextRemodelingLevel == null ? null : (item.LevelForNextRemodeling <= 0 ? "table-info" : "table-warning"))">
                        <td>
                            @item.ShipId
                        </td>
                        <td>
                            @item.ShipInfo.ShipType.Name
                        </td>
                        <td>
                            @Html.ActionLink(item.ShipInfo.Name, "Index", "Ship", routeValues: new { id = item.ShipInfo.Name }, htmlAttributes: null)
                        </td>
                        <td>
                            @item.Level
                        </td>
                        <td data-nextremodelinglevel="@item.ShipInfo.NextRemodelingLevel">
                            @if (item.ShipInfo.NextRemodelingLevel == null)
                            {
                                <text>改造完了</text>
                            }
                            else
                            {
                                @(item.LevelForNextRemodeling <= 0 ? "改造可能" : "(+" + item.LevelForNextRemodeling.ToString() + ")")
                            }
                        </td>
                        <td>
                            @item.Exp
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4">
        <svg id="meter" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>
    </div>
    <script type="text/javascript">
        var total_list = [
            @foreach (var total in HiyoshiCfhWeb.Models.Experience.TotalList)
            {
                <text>@total,</text>
            }
        ];
        var leveling = {
            current_ship: null,
            milestone_level: 100,
            milestone_text: "",
            meter_max_exp: 0,
            positionFromExp: function (exp) {
                var height = $("#meter").height();
                return height - exp * height / this.meter_max_exp;
            }
        };
        var colors = {
            light_scale: "#666666",
            heavy_scale: "#888888",
            indicator: "#121EA4",
            milestone: "#E73333"
        };
        window.onload = function () {
            $("div.leveling-wrap").height(
                $("div.leveling-wrap").height() + $(window).height() - $("body").height()
                );
            rebuildMeter(total_list[100]);
            $("table.leveling tbody tr").click(function () {
                $("table.leveling tbody tr.active").removeClass("active");
                $(this).addClass("active");
                leveling.current_ship = {
                    name: $(this).children().eq(2).text().trim(),
                    level: Number($(this).children().eq(3).text()),
                    exp: Number($(this).children().eq(5).text()),
                    nextremodelinglevel: Number($(this).children().eq(4).attr("data-nextremodelinglevel"))
                };
                if (leveling.current_ship.level >= 100) {
                    leveling.milestone_level = 155;
                    leveling.milestone_text = "カンスト";
                } else if (leveling.current_ship.nextremodelinglevel) {
                    leveling.milestone_level = leveling.current_ship.nextremodelinglevel;
                    leveling.milestone_text = "改造";
                } else {
                    leveling.milestone_level = 100;
                    leveling.milestone_text = "ケッコン";
                }
                rebuildMeter(total_list[Math.min(leveling.milestone_level + 5, 155)]);
                deleteIndicator();
                drawIndicator();
                updateMilestone();
            });
            function drawIndicator() {
                var width = $("#meter").width();
                var position = leveling.positionFromExp(leveling.current_ship.exp);
                var name = leveling.current_ship.name;
                var g = $(document.createElementNS("http://www.w3.org/2000/svg", "g"));
                g.attr({ "id": "current-indicator" });
                $("#meter").append(g);
                var line = $(document.createElementNS("http://www.w3.org/2000/svg", "line"));
                line.attr({
                    "x1": 0,
                    "y1": position,
                    "x2": width,
                    "y2": position,
                    "stroke": colors.indicator,
                    "stroke-width": "1.5px"
                });
                g.append(line);
                var ship_text = $(document.createElementNS("http://www.w3.org/2000/svg", "text"));
                ship_text.attr({
                    "x": 10,
                    "y": position - 10,
                    "font-size": "30"
                });
                ship_text.text(name);
                g.append(ship_text);
            }
            function deleteIndicator() {
                $("#current-indicator").remove();
            }
            function updateMilestone() {
                $("#current-milestone").remove();
                var width = $("#meter").width();
                var position = leveling.positionFromExp(total_list[leveling.milestone_level]);
                var g = $(document.createElementNS("http://www.w3.org/2000/svg", "g"));
                g.attr({ "id": "current-milestone" });
                $("#meter").append(g);
                var line = $(document.createElementNS("http://www.w3.org/2000/svg", "line"));
                line.attr({
                    "x1": 0,
                    "y1": position,
                    "x2": width,
                    "y2": position,
                    "stroke": colors.milestone,
                    "stroke-width": "1.5px"
                });
                g.append(line);
                var milestone_text = $(document.createElementNS("http://www.w3.org/2000/svg", "text"));
                milestone_text.attr({
                    "x": 10,
                    "y": position
                });
                milestone_text.text(leveling.milestone_text);
                g.append(milestone_text);
            }
            function rebuildMeter(meter_max_exp) {
                leveling.meter_max_exp = meter_max_exp;
                $("#meter").empty();
                var g = $(document.createElementNS("http://www.w3.org/2000/svg", "g"));
                g.attr({ "id": "scale" });
                $("#meter").append(g);
                total_list.forEach(function (element, index) {
                    if (index > 0 && element <= meter_max_exp) {
                        g.append(createScaleLine(element, index));
                    }
                });
            }
            function createScaleLine(exp, level) {
                var width = $("#meter").width();
                var line = $(document.createElementNS("http://www.w3.org/2000/svg", "line"));
                line.attr({
                    "x1": 0,
                    "y1": leveling.positionFromExp(exp),
                    "x2": width,
                    "y2": leveling.positionFromExp(exp),
                    "stroke": level % 10 == 0 ? colors.heavy_scale : colors.light_scale,
                    "stroke-width": "0.5px",
                    "id": "lv" + level
                });
                return line;
            }
        };
    </script>
</div>
