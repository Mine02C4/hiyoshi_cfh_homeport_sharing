@model Tuple<HiyoshiCfhWeb.Models.Admiral, IOrderedQueryable<HiyoshiCfhWeb.Models.MaterialRecord>>
@{
    var admiral = Model.Item1;
    var records = Model.Item2;
    ViewBag.Title = "資材統計";
}

@Html.Partial("_HeaderPartial", admiral)

<p>@Html.ActionLink("インポート", "Materials", "Import", null, new { @class = "btn btn-info" })</p>

<h3>主要4資材</h3>

<svg id="main_chart" width="1140" height="800" style="overflow: visible"></svg>

<h3>その他資材</h3>

<svg id="other_chart" style="height: 400px; overflow: visible"></svg>

<script type="text/javascript" src="@Url.Content("/Scripts/d3/d3.min.js")"></script>
<script type="text/javascript" src="@Url.Content("/Scripts/nv.d3.min.js")"></script>
<script type="text/javascript">
    function setup_chart(url, selector) {
        d3.json(url, function (data) {
            var colors = d3.schemeCategory20;
            var keyColor = function (d, i) { return colors(d.key) };
            var chart = nv.models.lineWithFocusChart()
                    .x(function (d) { return new Date(d["time"]) })
                    .y(function (d) { return d["value"] })
                    .showLegend(true)
                    .color(keyColor);

            chart.xAxis.tickFormat(
                function (d) {
                    return d3.time.format("%Y-%m-%d %H:%M:%S")(new Date(d))
                });
            chart.x2Axis.tickFormat(
                function (d) {
                    return d3.time.format("%Y-%m-%d %H:%M:%S")(new Date(d))
                });
            chart.yAxis.tickFormat(d3.format(',.0d'));
            chart.y2Axis.tickFormat(d3.format(',.0d'));
            chart.forceY(0);
            d3.select(selector).datum(data).call(chart);
            nv.utils.windowResize(function () {
                chart.update();
            });
            return chart;
        });
    }
    function create_graph(data) {
        var svg;
        svg = d3.select("#main_chart");
        var w = 1140;
        var h = 600;
        var x = d3.scaleTime().range([0, w]);
        var y = d3.scaleLinear().range([h, 0]);
        var maxValue = Math.max(
            d3.max(data[0]["values"], function (d) { return d["value"]; }),
            d3.max(data[1]["values"], function (d) { return d["value"]; }),
            d3.max(data[2]["values"], function (d) { return d["value"]; }),
            d3.max(data[3]["values"], function (d) { return d["value"]; })
        );
        x.domain([new Date(data[0]["values"][0]["time"]), new Date()]);
        y.domain([0, maxValue]);
        var xAxis = d3.axisBottom(x).tickSize(h).tickPadding(6).tickFormat(
            function (d) {
                return d3.timeFormat("%Y-%m-%d %H:%M:%S")(new Date(d))
            });
        var yAxis = d3.axisRight(y).tickSize(w).tickPadding(6);
        var gX = svg.append("g")
            .attr("class", "axis axis-x")
            .call(xAxis);
        var gY = svg.append("g")
            .attr("class", "axis axis-y")
            .call(yAxis);
        var x2 = x.copy()
        var line = d3.line()
                    .x(function (d) {
                        return x2(new Date(d["time"]));
                    })
                    .y(function (d) {
                        return y(d["value"]);
                    })
                    .curve(d3.curveStepAfter);

        function zoomed() {
            x2 = d3.event.transform.rescaleX(x);
            gX.call(xAxis.scale(d3.event.transform.rescaleX(x)));
            pathFuel.attr("d", line);
            pathBull.attr("d", line);
            pathSteel.attr("d", line);
            pathBauxite.attr("d", line);
        }

        var pathFuel = svg.append("path");
        var pathBull = svg.append("path");
        var pathSteel = svg.append("path");
        var pathBauxite = svg.append("path");
        pathFuel.datum(data[0]["values"]).attr("d", line)
            .attr("class", "line line-fuel");
        pathBull.datum(data[1]["values"]).attr("d", line)
            .attr("class", "line line-bull");
        pathSteel.datum(data[2]["values"]).attr("d", line)
            .attr("class", "line line-steel");
        pathBauxite.datum(data[3]["values"]).attr("d", line)
            .attr("class", "line line-bauxite");

        var zoom = d3.zoom().on("zoom", zoomed);
        svg.call(zoom);
    }
    var svg;
    var w = 1140;
    var h = 600;
    var x = d3.scaleTime().range([0, w]);
    var y = d3.scaleLinear().range([h, 0]);
    var xAxis = d3.axisBottom(x).tickSize(-h, 0).tickPadding(6);
    var yAxis = d3.axisRight(y).tickSize(-w).tickPadding(6);
    var line = d3.line()
                .x(function (d) {
                    return x(new Date(d["time"]));
                })
                .y(function (d) {
                    return y(d["value"]);
                })
                .curve(d3.curveStepAfter);
    function setup_chart2(url, selector) {
        d3.json(url, function (error, data) {
            if (error)
                return console.log("there was an error loading the data: " + error);
            create_graph(data);
        });
    }
    setup_chart2("@Html.Raw(Url.Action("Materials", new { type = "json", target = "main" }))", "#main_chart");
    //setup_chart("@Html.Raw(Url.Action("Materials", new { type = "json", target = "other" }))", "#other_chart");
</script>
<style type="text/css">
    .line {
        fill: none;
        stroke-width: 1.5px;
    }

    .line-fuel {
        stroke: green;
    }

    .line-bull {
        stroke: chocolate;
    }

    .line-steel {
        stroke: gray;
    }

    .line-bauxite {
        stroke: orange;
    }
</style>

